{"version":3,"sources":["Components/Controls.js","Components/Loading.js","Components/Canvas.js","Components/DiamondSquare.js","App.js","serviceWorker.js","index.js"],"names":["Controls","props","react_default","a","createElement","id","className","type","onChange","toggleGrayscale","min","max","value","n","e","setN","target","roughness","step","setRoughness","disabled","isLoading","onClick","generateTerrain","Loading","concat","light","THREE","position","set","castShadow","ambientLight","scene","add","renderer","antialias","Canvas","mount","useRef","camera","clientWidth","clientHeight","up","lookAt","_useState","useState","_useState2","Object","slicedToArray","grayscale","setGrayscale","_useState3","_useState4","rotateMessage","displayRotateMessage","_useState5","_useState6","setIsLoading","renderScene","render","onResize","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","setSize","current","setTimeout","children","geometry","dispose","material","remove","diamondSquare","terrainMap","points","length","map","Math","pow","expandedArray","i","push","apply","toConsumableArray","count","colors","attributes","array","z","round","random","setAttribute","color","flatShading","dithering","precision","vertexColors","shininess","createSquares","rotation","y","PI","useEffect","addEventListener","appendChild","domElement","controls","OrbitControls","maxPolarAngle","minDistance","maxDistance","rotateSpeed","requestAnimationFrame","animate","update","ref","Components_Loading","Components_Controls","DiamondSquare","setPoints","calculateZ","pointToCalc","pointDistance","filter","point","randomAmount","corners","forEach","corner","val","pointsArray","corner1","corner2","corner3","corner4","newRow","j","pointsToUse","adjacentHeights","getAdjacent","averageSurroundingHeight","reduce","curr","total","removeSpikes","pointI","pointJ","adjacentPoints","setClearColor","App","Component","Boolean","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3fcab8eb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Controls = (props) => {\r\n  return (\r\n    <div id=\"controls\">\r\n\r\n      <div id=\"grayscale-toggle\" className=\"control-item\">\r\n        <p>Grayscale:</p>\r\n        <input type=\"checkbox\" onChange={props.toggleGrayscale} />\r\n      </div>\r\n\r\n      <div id=\"map-size-toggle\" className=\"control-item\">\r\n        <p>Map size:</p>\r\n        <input type=\"range\" min=\"7\" max=\"9\" value={props.n} onChange={(e) => props.setN(e.target.value)}/>\r\n      </div>\r\n\r\n      <div id=\"roughness-toggle\" className=\"control-item\">\r\n        <p>Roughness:</p>\r\n        <input type=\"range\" min=\".1\" max=\".7\" value={props.roughness} step=\".1\" onChange={(e) => props.setRoughness(e.target.value)}/>\r\n      </div>\r\n\r\n      <button id=\"generate-button\" className=\"control-item\" disabled={props.isLoading} onClick={props.generateTerrain}>Generate Terrain</button>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Controls;\r\n","import React from 'react';\r\n\r\nconst Loading = (props) => {\r\n  return (\r\n    <div className={`loading-block loading-block-${props.isLoading}`}>\r\n      <div id=\"loading-image\">\r\n        <h1>Loading...</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loading;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\n\r\nimport React, {useState, useEffect, useRef} from 'react';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nimport Controls from './Controls';\r\nimport Loading from './Loading';\r\n\r\nlet light = new THREE.PointLight(0xFFFFFF, 0.8, 0, 2);\r\nlight.position.set(300, 100, 0);\r\nlight.castShadow = true;\r\n\r\nlet ambientLight = new THREE.AmbientLight((0xEEEEEE));\r\n\r\nlet scene = new THREE.Scene();\r\nscene.add(light);\r\nscene.add(ambientLight);\r\n\r\nlet renderer = new THREE.WebGLRenderer({antialias: true});\r\nrenderer.setClearColor('rgb(50, 50, 50)');\r\n\r\nexport default function Canvas(props) {\r\n\r\n  let mount = useRef(null);\r\n\r\n  let camera = new THREE.PerspectiveCamera(14, mount.clientWidth / mount.clientHeight, 0.1, 9000);\r\n  camera.position.set( 400, -100, 740 );\r\n  camera.up.set(1,0,0);\r\n  camera.lookAt( 0, 0, 0 );\r\n\r\n  let [grayscale, setGrayscale] = useState(false);\r\n  const [rotateMessage, displayRotateMessage] = useState(true);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  let renderScene = () => {\r\n    renderer.render(scene, camera);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  let onResize = () => {\r\n    camera.aspect = window.innerWidth / window.innerHeight;\r\n    camera.updateProjectionMatrix();\r\n    renderer.setSize(mount.current.clientWidth, mount.current.clientHeight);\r\n    renderScene();\r\n  };\r\n\r\n  let toggleGrayscale = () => {\r\n    setGrayscale(!grayscale);\r\n    if (scene.children[2]) {\r\n      if (!grayscale) {\r\n        scene.children[2].material = new THREE.MeshPhongMaterial({color: 'gray', flatShading: true, shininess: 1, precision: 'lowp'});\r\n      } else {\r\n        scene.children[2].material = new THREE.MeshPhongMaterial({vertexColors: THREE.VertexColors, color: 'white', flatShading: true, shininess: 1, precision: 'lowp'});\r\n      }\r\n    }\r\n    renderScene();\r\n  }\r\n\r\n  let createSquares = () => {\r\n    if (props.points.length === 0) {\r\n      return;\r\n    }\r\n    let map = new THREE.PlaneBufferGeometry(Math.pow(2, props.n)+1, Math.pow(2, props.n)+1, Math.pow(2, props.n), Math.pow(2, props.n));\r\n\r\n    let expandedArray = [];\r\n    for (let i = 0; i < props.points.length; i++) {\r\n      expandedArray.push(...props.points[i]);\r\n    }\r\n\r\n    let count = 0;\r\n    let colors = [];\r\n\r\n    for (let i = 0; i < map.attributes.position.array.length; i += 3) {\r\n      map.attributes.position.array[i+2] = expandedArray[count].z;\r\n      if (expandedArray[count].z >= 74.5) { // mountain peak\r\n        colors.push((176+(Math.round(Math.random()*15)))/255);\r\n        colors.push((174+(Math.round(Math.random()*15)))/255);\r\n        colors.push((174+(Math.round(Math.random()*15)))/255);\r\n      } else if (expandedArray[count].z >= 46) { // transition to mountain peak\r\n        colors.push(Math.round(109+(expandedArray[count].z - 48)*2.5+(Math.random()*20))/255);\r\n        colors.push(Math.round(105+(expandedArray[count].z - 48)*2.5+(Math.random()*20))/255);\r\n        colors.push(Math.round(105+(expandedArray[count].z - 48)*2.5+(Math.random()*20))/255);\r\n      } else if (expandedArray[count].z > 4) { // grass\r\n        colors.push((Math.round(30+expandedArray[count].z*1.85))/255);\r\n        colors.push((Math.round(60+(expandedArray[count].z*.9))+(Math.round(Math.random()*20)))/255);\r\n        colors.push((Math.round(30+expandedArray[count].z*1.7))/255);\r\n      } else if (expandedArray[count].z > 0) { // transition to sand\r\n        colors.push((Math.round((90 - (expandedArray[count].z*14))+(Math.random()*10)))/255);\r\n        colors.push((Math.round((120 - expandedArray[count].z*14)+(Math.random()*20)))/255);\r\n        colors.push((Math.round((90 - expandedArray[count].z*14)+(Math.random()*10)))/255);\r\n      } else if (expandedArray[count].z > -2) { // sand\r\n        colors.push((Math.round(180+(Math.random()*20)))/255);\r\n        colors.push((Math.round(180+(Math.random()*20)))/255);\r\n        colors.push((Math.round(130+(Math.random()*20)))/255);\r\n      } else if (expandedArray[count].z > -22) { // shallow water\r\n        colors.push((Math.round(70 + (expandedArray[count].z + 1.2)*2.5))/255);\r\n        colors.push((Math.round(70 + (expandedArray[count].z + 1.2)*2.5))/255);\r\n        colors.push((Math.round(90 + (expandedArray[count].z + 1.2)*2.5))/255);\r\n      } else { // deep water\r\n        colors.push(18/255);\r\n        colors.push(18/255);\r\n        colors.push(38/255);\r\n      }\r\n      count += 1;\r\n    }\r\n    map.setAttribute( 'color', new THREE.Float32BufferAttribute(colors, 3));\r\n\r\n    let material;\r\n    if (grayscale) {\r\n      material = new THREE.MeshPhongMaterial(\r\n        {\r\n          color: 'gray', flatShading: true, dithering: true, precision: 'lowp'\r\n        }\r\n      );\r\n    } else {\r\n      material = new THREE.MeshPhongMaterial(\r\n        {\r\n          vertexColors: THREE.VertexColors, flatShading: true, shininess: 1, dithering: true, precision: 'lowp'\r\n        }\r\n      );\r\n    }\r\n\r\n    return new THREE.Mesh(map, material);\r\n  };\r\n\r\n\r\n  let generateTerrain = () => {\r\n    if (isLoading) {\r\n      return;\r\n    }\r\n    setIsLoading(true);\r\n    setTimeout(() => {\r\n      if (scene.children[2]) {\r\n        scene.children[2].geometry.dispose();\r\n        scene.children[2].material.dispose();\r\n        scene.remove(scene.children[2]);\r\n      }\r\n      props.diamondSquare();\r\n      let terrainMap = createSquares();\r\n      terrainMap.castShadow = true;\r\n      terrainMap.position.set(0, 0, 0);\r\n      scene.add(terrainMap);\r\n      terrainMap.rotation.y = Math.PI / 2 ;\r\n      onResize();\r\n    }, 0);\r\n  };\r\n\r\n  useEffect(() => {\r\n    renderer.setSize(mount.current.clientWidth, mount.current.clientHeight);\r\n    window.addEventListener('resize', onResize);\r\n    mount.current.appendChild(renderer.domElement);\r\n    renderer.domElement.addEventListener('click', () => displayRotateMessage(false));\r\n    renderer.domElement.addEventListener('touch', () => displayRotateMessage(false));\r\n\r\n    let controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.maxPolarAngle = 1.5;\r\n    controls.minDistance = 100;\r\n    controls.maxDistance = 2100;\r\n    controls.rotateSpeed = 0.25;\r\n\r\n    function animate() {\r\n      controls.update();\r\n      window.requestAnimationFrame(animate);\r\n      renderer.render(scene, camera);\r\n    }\r\n    window.requestAnimationFrame(animate);\r\n    generateTerrain();\r\n  }, []);\r\n\r\n  return (\r\n    <div id=\"generator\">\r\n      <div id=\"canvas\" ref={mount}>\r\n\r\n        <div className={`rotate-message-${rotateMessage}`}>\r\n          <h3>Click and drag to rotate, pinch or mousewheel to zoom</h3>\r\n        </div>\r\n\r\n        <Loading isLoading={isLoading}/>\r\n      </div>\r\n\r\n      <Controls\r\n        grayscale={grayscale}\r\n        n={props.n}\r\n        setN={props.setN}\r\n        roughness={props.roughness}\r\n        setRoughness={props.setRoughness}\r\n        toggleGrayscale={toggleGrayscale}\r\n        generateTerrain={generateTerrain}\r\n        isLoading={isLoading}\r\n      />\r\n    </div>\r\n  )\r\n\r\n}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\n\r\nimport React, {useState, useEffect} from 'react';\r\nimport Canvas from './Canvas';\r\n\r\nexport default function DiamondSquare() {\r\n\r\n  let [n, setN] = useState(8);\r\n  let [roughness, setRoughness] = useState(.6);\r\n  let [points, setPoints] = useState([]);\r\n\r\n\r\n  let generateArray = (corner1, corner2, corner3, corner4) => {\r\n    let pointsArray = [];\r\n    for (let i = 0; i < (Math.pow(2, n)+1); i++) {\r\n      let newRow = [];\r\n      for (let j = 0; j < (Math.pow(2, n)+1); j++) {\r\n        newRow.push({z: null});\r\n      }\r\n      pointsArray.push(newRow);\r\n    }\r\n    pointsArray[0][0].z = corner1;\r\n    pointsArray[pointsArray.length-1][0].z = corner2;\r\n    pointsArray[pointsArray.length-1][pointsArray.length-1].z = corner3;\r\n    pointsArray[0][pointsArray.length-1].z = corner4;\r\n    return pointsArray;\r\n  };\r\n\r\n\r\n  let removeSpikes = (pointsArray) => {\r\n    for (let i = 0; i < pointsArray.length; i++) {\r\n      for (let j = 0; j < pointsArray[i].length; j++) {\r\n        let adjacentHeights = getAdjacent(pointsArray, i, j);\r\n        let averageSurroundingHeight = adjacentHeights.reduce((curr, total) => total += curr)/adjacentHeights.length;\r\n        pointsArray[i][j].z = averageSurroundingHeight;\r\n      }\r\n    }\r\n    return pointsArray;\r\n  };\r\n\r\n\r\n  let calculateZ = (points, pointToCalc, n, pointDistance) => {\r\n    points = points.filter((point) => point.z !== null);\r\n    let z = 0;\r\n    for (let i = 0; i < points.length; i++) {\r\n      z += points[i].z;\r\n    }\r\n    z = z/points.length;\r\n    let randomAmount;\r\n    randomAmount = Math.random() * pointDistance * roughness * .7;\r\n    if (n === 1) {\r\n      randomAmount *= .8;\r\n    }\r\n    if (Math.random() < 0.5) {\r\n      z -= randomAmount;\r\n    } else {\r\n      z += randomAmount;\r\n    }\r\n    pointToCalc.z = z;\r\n  };\r\n\r\n\r\n  let diamondSquare = () => {\r\n    let corners = [0, 0, 0, 0];\r\n    corners.forEach((corner, i) => {\r\n      let val = Math.random() * n * 2;\r\n      if (Math.random() < .5) {\r\n        corners[i] -= val;\r\n      } else {\r\n        corners[i] += val;\r\n      }\r\n    });\r\n\r\n    let pointsArray = generateArray(...corners);\r\n    let step = 1;\r\n    let pointDistance = pointsArray.length-1;\r\n\r\n    while (step < (2 * n + 1)) {\r\n      if (step % 2 !== 0) { // diamond step, use all 4 points\r\n        for (let i = 0; i < pointsArray.length; i+= pointDistance) {\r\n          for (let j = 0; j < pointsArray[i].length; j += pointDistance) {\r\n            if (j+pointDistance >= pointsArray[i].length || i+pointDistance >= pointsArray.length) {\r\n              break;\r\n            }\r\n            let pointsToUse = [];\r\n            pointsToUse.push(pointsArray[i][j]); // top left of current square\r\n            pointsToUse.push(pointsArray[i][j+pointDistance]);\r\n            pointsToUse.push(pointsArray[i+pointDistance][j]);\r\n            pointsToUse.push(pointsArray[i+pointDistance][j+pointDistance]); // bottom right of current square\r\n\r\n            calculateZ(pointsToUse, pointsArray[Math.round(i+pointDistance/2)][Math.round(j+pointDistance/2)], step, pointDistance);\r\n          }\r\n        }\r\n      } else { // square step, use only 3 points if on edge\r\n        for (let i = 0; i < pointsArray.length; i += pointDistance) {\r\n          for (let j = 0; j < pointsArray[i].length; j += pointDistance) {\r\n            let pointsToUse = [];\r\n            if (pointsArray[i][j].z !== null) {\r\n              continue;\r\n            } else {\r\n              if (i-pointDistance >= 0) {\r\n                pointsToUse.push(pointsArray[i-pointDistance][j]);\r\n              }\r\n              if (j+pointDistance < pointsArray.length) {\r\n                pointsToUse.push(pointsArray[i][j+pointDistance]);\r\n              }\r\n              if (i+pointDistance < pointsArray.length) {\r\n                pointsToUse.push(pointsArray[i+pointDistance][j]);\r\n              }\r\n              if (j-pointDistance >= 0) {\r\n                pointsToUse.push(pointsArray[i][j-pointDistance]);\r\n              }\r\n              calculateZ(pointsToUse, pointsArray[i][j], step, pointDistance);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (step % 2 !== 0) {\r\n        pointDistance = pointDistance/2;\r\n      }\r\n      if (pointDistance < 1) {\r\n        pointDistance = 1;\r\n      }\r\n      step++;\r\n    }\r\n    setPoints(removeSpikes(pointsArray));\r\n  };\r\n\r\n\r\n  let getAdjacent = (array, pointI, pointJ) => {\r\n    let adjacentPoints = [];\r\n    for (let i = pointI-1; i <= pointI+1; i++) {\r\n      if (i < 0) {\r\n        continue;\r\n      }\r\n      if (i > array.length-1) {\r\n        break;\r\n      }\r\n      for (let j = pointJ-1; j <= pointJ+1; j++) {\r\n        if (j < 0) {\r\n          continue;\r\n        }\r\n        if ((i === pointI && j === pointJ) || j > array.length-1) {\r\n          continue;\r\n        }\r\n\r\n        adjacentPoints.push(array[i][Math.round(j)].z);\r\n      }\r\n    }\r\n    return adjacentPoints;\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    diamondSquare();\r\n  }, [n, roughness]);\r\n\r\n\r\n  if (points.length > 0) {\r\n    return <Canvas\r\n              n={n}\r\n              roughness={roughness}\r\n              points={points}\r\n              diamondSquare={diamondSquare}\r\n              setN={setN}\r\n              setRoughness={setRoughness}\r\n               />\r\n  } else {\r\n    return null;\r\n  }\r\n\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nimport DiamondSquare from './Components/DiamondSquare';\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n\r\n        <DiamondSquare />\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}