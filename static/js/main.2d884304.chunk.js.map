{"version":3,"sources":["Components/Controls.js","Components/Loading.js","Components/Canvas.js","Components/DiamondSquare.js","App.js","serviceWorker.js","index.js"],"names":["Controls","props","react_default","a","createElement","id","className","type","onChange","toggleGrayscale","min","max","value","n","e","setN","target","roughness","step","setRoughness","zoom","setZoom","disabled","isLoading","onClick","generateTerrain","Loading","concat","light","THREE","position","set","castShadow","ambientLight","scene","add","renderer","antialias","Canvas","mount","useRef","camera","clientWidth","clientHeight","up","lookAt","_useState","useState","_useState2","Object","slicedToArray","grayscale","setGrayscale","_useState3","_useState4","mouseIsDown","setMouseDown","_useState5","_useState6","clickX","setClickX","_useState7","_useState8","rotationX","setRotationX","_useState9","_useState10","rotateMessage","displayRotateMessage","_useState11","_useState12","setIsLoading","renderScene","render","onResize","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","setSize","current","toggleMouseDown","clientX","targetTouches","toggleMouseUp","children","rotation","x","rotateMap","setTimeout","geometry","dispose","material","remove","diamondSquare","terrainMap","points","length","map","Math","pow","expandedArray","i","push","apply","toConsumableArray","count","colors","attributes","array","z","round","random","setAttribute","color","flatShading","dithering","vertexColors","shininess","createSquares","y","PI","useEffect","addEventListener","appendChild","domElement","fov","ref","onMouseDown","onTouchStart","onMouseUp","onMouseOut","onMouseMove","onTouchMove","onTouchEnd","Components_Loading","Components_Controls","DiamondSquare","setPoints","calculateZ","pointToCalc","pointDistance","filter","point","randomAmount","corners","forEach","corner","val","pointsArray","corner1","corner2","corner3","corner4","newRow","j","pointsToUse","adjacentHeights","getAdjacent","averageSurroundingHeight","reduce","curr","total","removeSpikes","pointI","pointJ","adjacentPoints","setClearColor","App","Component","Boolean","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2d884304.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Controls = (props) => {\r\n  return (\r\n    <div id=\"controls\">\r\n\r\n      <div id=\"grayscale-toggle\" className=\"control-item\">\r\n        <p>Grayscale:</p>\r\n        <input type=\"checkbox\" onChange={props.toggleGrayscale} />\r\n      </div>\r\n\r\n      <div id=\"map-size-toggle\" className=\"control-item\">\r\n        <p>Map size:</p>\r\n        <input type=\"range\" min=\"7\" max=\"9\" value={props.n} onChange={(e) => props.setN(e.target.value)}/>\r\n      </div>\r\n\r\n      <div id=\"roughness-toggle\" className=\"control-item\">\r\n        <p>Roughness:</p>\r\n        <input type=\"range\" min=\".1\" max=\".7\" value={props.roughness} step=\".1\" onChange={(e) => props.setRoughness(e.target.value)}/>\r\n      </div>\r\n\r\n      <div id=\"zoom-slider\" className=\"control-item\">\r\n        <p>Zoom:</p>\r\n        <input type=\"range\" min=\"2\" max=\"30\" value={props.zoom} onChange={(e) => props.setZoom(e.target.value)}/>\r\n      </div>\r\n\r\n      <button id=\"generate-button\" className=\"control-item\" disabled={props.isLoading} onClick={props.generateTerrain}>Generate Terrain</button>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Controls;\r\n","import React from 'react';\r\n\r\nconst Loading = (props) => {\r\n  return (\r\n    <div className={`loading-block loading-block-${props.isLoading}`}>\r\n      <div id=\"loading-image\">\r\n        <h1>Loading...</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loading;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\n\r\nimport React, {useState, useEffect, useRef} from 'react';\r\nimport * as THREE from 'three';\r\n\r\nimport Controls from './Controls';\r\nimport Loading from './Loading';\r\n\r\nlet light = new THREE.PointLight( 0xFFFFFF );\r\nlight.position.set(290, 250, 690);\r\nlight.castShadow = true;\r\nlet ambientLight = new THREE.AmbientLight((0xcccccc));\r\n\r\nlet scene = new THREE.Scene();\r\nscene.add(light);\r\nscene.add(ambientLight);\r\n\r\nlet renderer = new THREE.WebGLRenderer({antialias: true});\r\nrenderer.setClearColor('rgb(50, 50, 50)');\r\n\r\nexport default function Canvas(props) {\r\n\r\n  let mount = useRef(null);\r\n\r\n  let camera = new THREE.PerspectiveCamera(props.zoom, mount.clientWidth / mount.clientHeight, 0.1, 9000);\r\n  camera.position.set( 400, -100, 740 );\r\n  camera.up.set(1,0,0);\r\n  camera.lookAt( 0, 0, 0 );\r\n\r\n\r\n  let [grayscale, setGrayscale] = useState(false);\r\n  let [mouseIsDown, setMouseDown] = useState(false);\r\n  let [clickX, setClickX] = useState('');\r\n  let [rotationX, setRotationX] = useState(0);\r\n  const [rotateMessage, displayRotateMessage] = useState(true);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n\r\n  let renderScene = () => {\r\n    renderer.render(scene, camera);\r\n    setIsLoading(false);\r\n  };\r\n\r\n\r\n  let onResize = () => {\r\n    camera.aspect = window.innerWidth / window.innerHeight;\r\n    camera.updateProjectionMatrix();\r\n    renderer.setSize(mount.current.clientWidth, mount.current.clientHeight);\r\n    renderScene();\r\n  };\r\n\r\n\r\n  let toggleMouseDown = (e) => {\r\n    setMouseDown(!mouseIsDown);\r\n    setClickX(e.clientX || e.targetTouches[0].clientX);\r\n  }\r\n\r\n  let toggleMouseUp = () => {\r\n    if (scene.children[2]) {\r\n      setMouseDown(false);\r\n      setClickX('');\r\n      setRotationX(scene.children[2].rotation.x || 0);\r\n    }\r\n  }\r\n\r\n  let rotateMap = (e) => {\r\n    if (mouseIsDown) {\r\n      if (scene.children[2]) {\r\n        displayRotateMessage(false);\r\n        scene.children[2].rotation.x = rotationX + ((clickX - (e.clientX || e.targetTouches[0].clientX))/500);\r\n        renderScene();\r\n      }\r\n    }\r\n  }\r\n\r\n  let toggleGrayscale = () => {\r\n    setGrayscale(!grayscale);\r\n    if (scene.children[2]) {\r\n      if (!grayscale) {\r\n        scene.children[2].material = new THREE.MeshBasicMaterial({color: 'gray', flatShading: true});\r\n      } else {\r\n        scene.children[2].material = new THREE.MeshBasicMaterial({vertexColors: THREE.VertexColors, color: 'white', flatShading: true, shininess: 1});\r\n      }\r\n    }\r\n    renderScene();\r\n  }\r\n\r\n\r\n  let createSquares = () => {\r\n    if (props.points.length === 0) {\r\n      return;\r\n    }\r\n    let map = new THREE.PlaneBufferGeometry(Math.pow(2, props.n)+1, Math.pow(2, props.n)+1, Math.pow(2, props.n), Math.pow(2, props.n));\r\n\r\n    let expandedArray = [];\r\n    for (let i = 0; i < props.points.length; i++) {\r\n      expandedArray.push(...props.points[i]);\r\n    }\r\n\r\n    let count = 0;\r\n    let colors = [];\r\n\r\n    for (let i = 0; i < map.attributes.position.array.length; i += 3) {\r\n      map.attributes.position.array[i+2] = expandedArray[count].z;\r\n      if (expandedArray[count].z >= 68) { // mountain peak\r\n        colors.push((170+(Math.round(Math.random()*10)))/255);\r\n        colors.push((170+(Math.round(Math.random()*10)))/255);\r\n        colors.push((170+(Math.round(Math.random()*10)))/255);\r\n      } else if (expandedArray[count].z >= 46) { // transition to mountain peak\r\n        colors.push(Math.round(109+(expandedArray[count].z - 46)*2.5+(Math.random()*20))/255);\r\n        colors.push(Math.round(105+(expandedArray[count].z - 46)*2.5+(Math.random()*20))/255);\r\n        colors.push(Math.round(105+(expandedArray[count].z - 46)*2.5+(Math.random()*20))/255);\r\n      } else if (expandedArray[count].z > 4) { // grass\r\n        colors.push((Math.round(30+expandedArray[count].z*1.85))/255);\r\n        colors.push((Math.round(60+(expandedArray[count].z*.9))+(Math.round(Math.random()*20)))/255);\r\n        colors.push((Math.round(30+expandedArray[count].z*1.7))/255);\r\n      } else if (expandedArray[count].z > 0) { // transition to sand\r\n        colors.push((Math.round((90 - (expandedArray[count].z*14))+(Math.random()*10)))/255);\r\n        colors.push((Math.round((120 - expandedArray[count].z*14)+(Math.random()*20)))/255);\r\n        colors.push((Math.round((90 - expandedArray[count].z*14)+(Math.random()*10)))/255);\r\n      } else if (expandedArray[count].z > -2) { // sand\r\n        colors.push((Math.round(180+(Math.random()*20)))/255);\r\n        colors.push((Math.round(180+(Math.random()*20)))/255);\r\n        colors.push((Math.round(130+(Math.random()*20)))/255);\r\n      } else if (expandedArray[count].z > -22) { // shallow water\r\n        colors.push((Math.round(70 + (expandedArray[count].z + 1.2)*3))/255);\r\n        colors.push((Math.round(70 + (expandedArray[count].z + 1.2)*3))/255);\r\n        colors.push((Math.round(90 + (expandedArray[count].z + 1.2)*3))/255);\r\n      } else { // deep water\r\n        colors.push(8/255);\r\n        colors.push(8/255);\r\n        colors.push(28/255);\r\n      }\r\n      count += 1;\r\n    }\r\n    map.setAttribute( 'color', new THREE.Float32BufferAttribute(colors, 3));\r\n\r\n    let material;\r\n    if (grayscale) {\r\n      material = new THREE.MeshPhongMaterial(\r\n        {\r\n          color: 'gray', flatShading: true, dithering: true\r\n        }\r\n      );\r\n    } else {\r\n      material = new THREE.MeshPhongMaterial(\r\n        {\r\n          vertexColors: THREE.VertexColors, flatShading: true, shininess: 1, dithering: true\r\n        }\r\n      );\r\n    }\r\n\r\n    return new THREE.Mesh(map, material);\r\n  };\r\n\r\n\r\n  let generateTerrain = () => {\r\n    if (isLoading) {\r\n      return;\r\n    }\r\n    setIsLoading(true);\r\n    setTimeout(() => {\r\n      if (scene.children[2]) {\r\n        scene.children[2].geometry.dispose();\r\n        scene.children[2].material.dispose();\r\n        scene.remove(scene.children[2]);\r\n      }\r\n      props.diamondSquare();\r\n      let terrainMap = createSquares();\r\n      terrainMap.castShadow = true;\r\n      terrainMap.position.set(0, 0, 0);\r\n      scene.add(terrainMap);\r\n      terrainMap.rotation.x = rotationX;\r\n      terrainMap.rotation.y = Math.PI / 2 ;\r\n      onResize();\r\n    }, 0);\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    renderer.setSize(mount.current.clientWidth, mount.current.clientHeight);\r\n    window.addEventListener('resize', onResize);\r\n    mount.current.appendChild(renderer.domElement);\r\n    generateTerrain();\r\n  }, []);\r\n\r\n\r\n  useEffect(() => {\r\n    camera.fov = props.zoom;\r\n    onResize();\r\n  }, [camera, props.zoom]);\r\n\r\n\r\n  return (\r\n    <div id=\"generator\">\r\n      <div id=\"canvas\" ref={mount} onMouseDown={toggleMouseDown} onTouchStart={toggleMouseDown} onMouseUp={toggleMouseUp} onMouseOut={toggleMouseUp} onMouseMove={rotateMap} onTouchMove={rotateMap} onTouchEnd={toggleMouseUp}>\r\n\r\n        <div className={`rotate-message-${rotateMessage}`}>\r\n          <h3>Click and drag to rotate map</h3>\r\n        </div>\r\n\r\n        <Loading isLoading={isLoading}/>\r\n      </div>\r\n\r\n      <Controls\r\n        grayscale={grayscale}\r\n        n={props.n}\r\n        setN={props.setN}\r\n        roughness={props.roughness}\r\n        setRoughness={props.setRoughness}\r\n        zoom={props.zoom}\r\n        setZoom={props.setZoom}\r\n        toggleGrayscale={toggleGrayscale}\r\n        generateTerrain={generateTerrain}\r\n        isLoading={isLoading}\r\n      />\r\n    </div>\r\n  )\r\n\r\n}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\n\r\nimport React, {useState, useEffect} from 'react';\r\nimport Canvas from './Canvas';\r\n\r\nexport default function DiamondSquare() {\r\n\r\n  let [n, setN] = useState(7);\r\n  let [roughness, setRoughness] = useState(.6);\r\n  let [zoom, setZoom] = useState(14);\r\n  let [points, setPoints] = useState([]);\r\n\r\n\r\n  let generateArray = (corner1, corner2, corner3, corner4) => {\r\n    let pointsArray = [];\r\n    for (let i = 0; i < (Math.pow(2, n)+1); i++) {\r\n      let newRow = [];\r\n      for (let j = 0; j < (Math.pow(2, n)+1); j++) {\r\n        newRow.push({z: null});\r\n      }\r\n      pointsArray.push(newRow);\r\n    }\r\n    pointsArray[0][0].z = corner1;\r\n    pointsArray[pointsArray.length-1][0].z = corner2;\r\n    pointsArray[pointsArray.length-1][pointsArray.length-1].z = corner3;\r\n    pointsArray[0][pointsArray.length-1].z = corner4;\r\n    return pointsArray;\r\n  };\r\n\r\n\r\n  let removeSpikes = (pointsArray) => {\r\n    for (let i = 0; i < pointsArray.length; i++) {\r\n      for (let j = 0; j < pointsArray[i].length; j++) {\r\n        let adjacentHeights = getAdjacent(pointsArray, i, j);\r\n        let averageSurroundingHeight = adjacentHeights.reduce((curr, total) => total += curr)/adjacentHeights.length;\r\n        pointsArray[i][j].z = averageSurroundingHeight;\r\n      }\r\n    }\r\n    return pointsArray;\r\n  };\r\n\r\n\r\n  let calculateZ = (points, pointToCalc, n, pointDistance) => {\r\n    points = points.filter((point) => point.z !== null);\r\n    let z = 0;\r\n    for (let i = 0; i < points.length; i++) {\r\n      z += points[i].z;\r\n    }\r\n    z = z/points.length;\r\n    let randomAmount;\r\n    randomAmount = Math.random() * pointDistance * roughness * .7;\r\n    if (n === 1) {\r\n      randomAmount *= .8;\r\n    }\r\n    if (Math.random() < 0.5) {\r\n      z -= randomAmount;\r\n    } else {\r\n      z += randomAmount;\r\n    }\r\n    pointToCalc.z = z;\r\n  };\r\n\r\n\r\n  let diamondSquare = () => {\r\n    let corners = [0, 0, 0, 0];\r\n    corners.forEach((corner, i) => {\r\n      let val = Math.random() * n * 2;\r\n      if (Math.random() < .5) {\r\n        corners[i] -= val;\r\n      } else {\r\n        corners[i] += val;\r\n      }\r\n    });\r\n\r\n    let pointsArray = generateArray(...corners);\r\n    let step = 1;\r\n    let pointDistance = pointsArray.length-1;\r\n\r\n    while (step < (2 * n + 1)) {\r\n      if (step % 2 !== 0) { // diamond step, use all 4 points\r\n        for (let i = 0; i < pointsArray.length; i+= pointDistance) {\r\n          for (let j = 0; j < pointsArray[i].length; j += pointDistance) {\r\n            if (j+pointDistance >= pointsArray[i].length || i+pointDistance >= pointsArray.length) {\r\n              break;\r\n            }\r\n            let pointsToUse = [];\r\n            pointsToUse.push(pointsArray[i][j]); // top left of current square\r\n            pointsToUse.push(pointsArray[i][j+pointDistance]);\r\n            pointsToUse.push(pointsArray[i+pointDistance][j]);\r\n            pointsToUse.push(pointsArray[i+pointDistance][j+pointDistance]); // bottom right of current square\r\n\r\n            calculateZ(pointsToUse, pointsArray[Math.round(i+pointDistance/2)][Math.round(j+pointDistance/2)], step, pointDistance);\r\n          }\r\n        }\r\n      } else { // square step, use only 3 points if on edge\r\n        for (let i = 0; i < pointsArray.length; i += pointDistance) {\r\n          for (let j = 0; j < pointsArray[i].length; j += pointDistance) {\r\n            let pointsToUse = [];\r\n            if (pointsArray[i][j].z !== null) {\r\n              continue;\r\n            } else {\r\n              if (i-pointDistance >= 0) {\r\n                pointsToUse.push(pointsArray[i-pointDistance][j]);\r\n              }\r\n              if (j+pointDistance < pointsArray.length) {\r\n                pointsToUse.push(pointsArray[i][j+pointDistance]);\r\n              }\r\n              if (i+pointDistance < pointsArray.length) {\r\n                pointsToUse.push(pointsArray[i+pointDistance][j]);\r\n              }\r\n              if (j-pointDistance >= 0) {\r\n                pointsToUse.push(pointsArray[i][j-pointDistance]);\r\n              }\r\n              calculateZ(pointsToUse, pointsArray[i][j], step, pointDistance);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (step % 2 !== 0) {\r\n        pointDistance = pointDistance/2;\r\n      }\r\n      if (pointDistance < 1) {\r\n        pointDistance = 1;\r\n      }\r\n      step++;\r\n    }\r\n    setPoints(removeSpikes(pointsArray));\r\n  };\r\n\r\n\r\n  let getAdjacent = (array, pointI, pointJ) => {\r\n    let adjacentPoints = [];\r\n    for (let i = pointI-1; i <= pointI+1; i++) {\r\n      if (i < 0) {\r\n        continue;\r\n      }\r\n      if (i > array.length-1) {\r\n        break;\r\n      }\r\n      for (let j = pointJ-1; j <= pointJ+1; j++) {\r\n        if (j < 0) {\r\n          continue;\r\n        }\r\n        if ((i === pointI && j === pointJ) || j > array.length-1) {\r\n          continue;\r\n        }\r\n\r\n        adjacentPoints.push(array[i][Math.round(j)].z);\r\n      }\r\n    }\r\n    return adjacentPoints;\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    diamondSquare();\r\n  }, [n, roughness]);\r\n\r\n\r\n  if (points.length > 0) {\r\n    return <Canvas\r\n              n={n}\r\n              roughness={roughness}\r\n              zoom={zoom}\r\n              points={points}\r\n              diamondSquare={diamondSquare}\r\n              setN={setN}\r\n              setRoughness={setRoughness}\r\n              setZoom={setZoom}\r\n               />\r\n  } else {\r\n    return null;\r\n  }\r\n\r\n}\r\n","import React, {Component} from 'react';\n\nimport DiamondSquare from './Components/DiamondSquare';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <DiamondSquare />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}